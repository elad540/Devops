name: 'Terraform'

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

env:
  amount_of_instance: 1
  region: eu-central-1
  terraform_action: apply


jobs:
  terraform:
    name: 'terraform'
    runs-on: [ self-hosted, linux, X64 ]
    environment: production
    defaults:
      run:
        shell: bash
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terraform installer
        uses: autero1/action-terraform@v1.0.3
        with:
          # Terraform version to install
          terraform_version:  1.3.3

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

        # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -var "AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}" -var "AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}" -var "amount_of_instance=${{env.amount_of_instance}}" -var "region=${{env.region}}"
        continue-on-error: true

        # On push to "master", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform ${{env.terraform_action}}
        run: terraform ${{env.terraform_action}} -auto-approve -var "AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}}" -var "AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}}" -var "amount_of_instance=${{env.amount_of_instance}}" -var "region=${{env.region}}"



